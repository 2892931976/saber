# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: echo_server.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='echo_server.proto',
  package='echo_server',
  syntax='proto3',
  serialized_pb=_b('\n\x11\x65\x63ho_server.proto\x12\x0b\x65\x63ho_server\"\x1a\n\x0b\x45\x63hoRequest\x12\x0b\n\x03msg\x18\x01 \x01(\t\"\x18\n\tEchoReply\x12\x0b\n\x03msg\x18\x01 \x01(\t2H\n\nEchoServer\x12:\n\x04\x45\x63ho\x12\x18.echo_server.EchoRequest\x1a\x16.echo_server.EchoReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ECHOREQUEST = _descriptor.Descriptor(
  name='EchoRequest',
  full_name='echo_server.EchoRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='echo_server.EchoRequest.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=34,
  serialized_end=60,
)


_ECHOREPLY = _descriptor.Descriptor(
  name='EchoReply',
  full_name='echo_server.EchoReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='echo_server.EchoReply.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=62,
  serialized_end=86,
)

DESCRIPTOR.message_types_by_name['EchoRequest'] = _ECHOREQUEST
DESCRIPTOR.message_types_by_name['EchoReply'] = _ECHOREPLY

EchoRequest = _reflection.GeneratedProtocolMessageType('EchoRequest', (_message.Message,), dict(
  DESCRIPTOR = _ECHOREQUEST,
  __module__ = 'echo_server_pb2'
  # @@protoc_insertion_point(class_scope:echo_server.EchoRequest)
  ))
_sym_db.RegisterMessage(EchoRequest)

EchoReply = _reflection.GeneratedProtocolMessageType('EchoReply', (_message.Message,), dict(
  DESCRIPTOR = _ECHOREPLY,
  __module__ = 'echo_server_pb2'
  # @@protoc_insertion_point(class_scope:echo_server.EchoReply)
  ))
_sym_db.RegisterMessage(EchoReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class EchoServerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Echo = channel.unary_unary(
        '/echo_server.EchoServer/Echo',
        request_serializer=EchoRequest.SerializeToString,
        response_deserializer=EchoReply.FromString,
        )


class EchoServerServicer(object):

  def Echo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EchoServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Echo': grpc.unary_unary_rpc_method_handler(
          servicer.Echo,
          request_deserializer=EchoRequest.FromString,
          response_serializer=EchoReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'echo_server.EchoServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaEchoServerServicer(object):
  def Echo(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaEchoServerStub(object):
  def Echo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Echo.future = None


def beta_create_EchoServer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('echo_server.EchoServer', 'Echo'): EchoRequest.FromString,
  }
  response_serializers = {
    ('echo_server.EchoServer', 'Echo'): EchoReply.SerializeToString,
  }
  method_implementations = {
    ('echo_server.EchoServer', 'Echo'): face_utilities.unary_unary_inline(servicer.Echo),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_EchoServer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('echo_server.EchoServer', 'Echo'): EchoRequest.SerializeToString,
  }
  response_deserializers = {
    ('echo_server.EchoServer', 'Echo'): EchoReply.FromString,
  }
  cardinalities = {
    'Echo': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'echo_server.EchoServer', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
